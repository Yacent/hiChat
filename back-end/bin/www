#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('myapp:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var io = require('socket.io')(server);

// io.on('connection', function(socket) {
//   socket.broadcast.emit('hi');
// });

io.on('connection', function(socket) {
  console.log('a user connected');
  socket.on('disconnect', function() {
    console.log('user disconnected');
  });
  socket.on('chatMessage', function(payload, roomNum) {
    // socket.broadcast.emit('chat message', msg);
    io.to(roomNum).emit('chatMessageClient', payload);
  });
  socket.on('subscribe', function(params) {
    socket.emit('subscribe', socket.id);
  });
  socket.on('joinRoom', function(payload) {
    socket.join(payload.roomNum)
    // io.to(payload.roomNum).emit('joinTips')
  })
  socket.on('updateHome', function() {
    io.emit('updateNewsInHome');
  })
});

var mongoose = require('mongoose');
// mongoose.connection.collections['users'].drop( function(err) {
//     console.log('collection dropped');
// });
// mongoose.connection.collections['msgs'].drop( function(err) {
//     console.log('collection dropped');
// });
mongoose.connect('mongodb://localhost/hichat');
//
var db = mongoose.connection;
db.on('error', console.error.bind(console, 'connection error:'));
db.once('open', function() {
  console.log('success connect the database');
});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
